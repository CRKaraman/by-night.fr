# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'
    facebook_id_page: '205292952998805'
    google_map_key: '%env(GOOGLE_MAP_KEY_WEB)%'
    twitter_id_page: 'By__Night'
    class.guzzle.response: Guzzle\Http\Message\Response
    class.guzzle.client: Guzzle\Http\Client
    class.guzzle.oauthplugin: Guzzle\Plugin\Oauth\OauthPlugin
    twitter.baseurl: https://api.twitter.com/1.1

services:
    App\Producer\EventProducer: "@old_sound_rabbit_mq.add_event_producer"

    _defaults:
        autowire: true
        autoconfigure: true
        bind:
            $changePasswordFormFactory: "@fos_user.change_password.form.factory"
            $profileFormFactory: "@fos_user.profile.form.factory"
            $memoryCache: "@memory_cache"
            $webDir: "%kernel.project_dir%/public"
            $tempPath: "%kernel.project_dir%/public/uploads/temp"
            $facebookIdPage: "%facebook_id_page%"
            $twitterIdPage: "%twitter_id_page%"
            $debug: "%kernel.debug%"
            $cfUserEmail: "%env(CF_USER_EMAIL)%"
            $cfUserKey: "%env(CF_USER_KEY)%"
            $cfZone: "%env(CF_ZONE)%"
            $sowprogUsername: "%env(SOWPROG_USER)%"
            $sowprogPassword: "%env(SOWPROG_PASSWORD)%"
            $monitor: "%env(APP_MONITOR)%"

    App\:
        resource: '../src/*'
        exclude: '../src/{Annotation,Entity,Exception,Kernel.php,Migrations,Geolocalize,Producer,Reject,Repository,Search}'

    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Request\ParamConverter\:
        resource: '../src/Request/ParamConverter'
        tags:
            - { name: request.param_converter, priority: 0 }

    App\Social\FacebookAdmin:
        arguments:
            $config: { id: "%env(FACEBOOK_API_ID)%", secret: "%env(FACEBOOK_API_SECRET)%"}

    App\Social\Twitter:
        arguments:
            $config: { id: "%env(TWITTER_API_ID)%", secret: "%env(TWITTER_API_SECRET)%"}

    App\Social\EventBrite:
        arguments:
            $config: { id: "unused", secret: "unused" }

    App\Social\Google:
        arguments:
            $config: { id: "unused", secret: "unused"}

    App\Social\Facebook:
        arguments:
            $config: { id: "%env(FACEBOOK_API_ID)%", secret: "%env(FACEBOOK_API_SECRET)%"}

    App\Social\FacebookListEvents:
        arguments:
            $config: { id: "%env(FACEBOOK_API_ID)%", secret: "%env(FACEBOOK_API_SECRET)%"}

    App\Archive\EventArchivator:
        arguments:
            $objectPersister: "@fos_elastica.object_persister.event.event"

    App\Command\AppEventsImportCommand:
        arguments:
            $parsers:
                toulouse.opendata: '@App\Parser\Toulouse\ToulouseParser'
                toulouse.bikini: '@App\Parser\Toulouse\BikiniParser'
                openagenda: '@App\Parser\Common\OpenAgendaParser'
                sowprog: '@App\Parser\Common\SowProgParser'
                eventbrite: '@App\Parser\Common\EventBriteParser'

    App\Importer\CountryImporter:
        arguments:
            $dataDir: "%kernel.project_dir%/var/datas"

    App\Twig\AssetExtension:
        arguments:
            $mappingAssets: "%mapping_assets%"

    App\Form\Type\ProfileFormType:
        arguments:
            $class: "%fos_user.model.user.class%"

    App\Form\Type\RegistrationFormType:
        arguments:
            $class: "%fos_user.model.user.class%"

    App\Form\Type\ReCaptchaType:
        arguments:
            $siteKey: '6LflWQoUAAAAAGDlgrKTOPxxMXwpb932_Q_tuvKX'


    App\Validator\Constraints\EventConstraintValidator:
        tags:
            - { name: validator.constraint_validator, alias: EventContraintValidator }

    App\EventListener\EventExplorationListener:
        tags:
            - { name: doctrine.event_listener, event: preRemove }

    App\EventListener\EntityTagger:
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: doctrine.event_listener, event: preRemove }
            - { name: doctrine.event_listener, event: postFlush }

    App\EventListener\ReCaptchaListener:
        arguments:
            $formName: "fos_user_registration_form"
            $field: "recaptcha"

    App\Captcha\CaptchaWrapper:
        arguments:
            $secret: "%env(GOOGLE_RECAPTCHA_API_SECRET)%"

    App\Security\Core\User\FOSUBUserProvider:
        arguments:
            $properties: {facebook: facebook_id, google: google_id, twitter: twitter_id}

    Aws\S3\S3Client:
        arguments:
            -   version: "2006-03-01"
                region: "%env(AWS_S3_REGION)%"
                credentials:
                    key: "%env(AWS_S3_KEY)%"
                    secret: "%env(AWS_S3_SECRET)%"

    Sentry\Monolog\Handler:
        calls:
            -   method: setLevel
                arguments: ['error']
