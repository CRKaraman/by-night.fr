<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * PlaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaceRepository extends EntityRepository
{
    public function findByCities(array $cityIds, array $fbIds) {
        if(! count($cityIds)) {
            return [];
        }

        $query = $this
            ->createQueryBuilder("p")
            ->where("p.city IN(:cities)")
            ->setParameter('cities', $cityIds);

        if(count($fbIds)) {
            $query
                ->andWhere("p.facebookId NOT IN (:fbIds)")
                ->setParameter("fbIds", $fbIds);
        }

        return $query
            ->getQuery()
            ->getResult();
    }

    public function findByZipCities(array $zipCityIds, array $fbIds) {
        if(! count($zipCityIds)) {
            return [];
        }

        $query = $this
            ->createQueryBuilder("p")
            ->where("p.zipCity IN(:cities)")
            ->setParameter('cities', $zipCityIds);

        if(count($fbIds)) {
            $query
                ->andWhere("p.facebookId NOT IN (:fbIds)")
                ->setParameter("fbIds", $fbIds);
        }

        return $query
            ->getQuery()
            ->getResult();
    }

    public function findAllVilles()
    {
        return $this->_em
            ->createQueryBuilder()
            ->select('p.ville')
            ->addSelect('s.id')
            ->from('AppBundle:Place', 'p')
            ->join('AppBundle:Site', 's', Expr\Join::WITH, 'p.site = s')
            ->where('p.ville IS NOT NULL')
            ->groupBy('p.ville')
            ->getQuery()
            ->getScalarResult();
    }

    public function findAllFBIds()
    {
        $places = $this->_em
            ->createQueryBuilder()
            ->select('p.facebookId')
            ->from('AppBundle:Place', 'p')
            ->where('p.facebookId IS NOT NULL')
            ->getQuery()
            ->getScalarResult();

        return array_unique(array_filter(array_column($places, 'facebookId')));
    }
}
