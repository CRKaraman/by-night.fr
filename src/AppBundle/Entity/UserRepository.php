<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function getUserFbIds()
    {
        $datas = $this->createQueryBuilder('u')
            ->select('DISTINCT(i.facebook_id)')
            ->join('u.info', 'i')
            ->where("i.facebook_id IS NOT NULL")
            ->getQuery()
            ->getScalarResult();

        return array_filter(array_map('current', $datas));
    }

    public function getUsersWithInfo($page, $limit)
    {
        return $this->createQueryBuilder('u')
            ->select('u', 'i')
            ->join('u.info', 'i')
            ->setFirstResult($page * $limit)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function findTopMembres($page = 1, $limit = 7)
    {
        return $this->createQueryBuilder('u')
            ->select('u', 'i')
            ->leftJoin('u.info', 'i')
            ->orderBy('u.lastLogin', 'DESC')
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();
    }

    public function findMembresCount()
    {
        return $this->_em
            ->createQueryBuilder()
            ->select('count(u.id)')
            ->from('AppBundle:User', 'u')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getLastDateUser(Site $site)
    {
        return $this->_em
            ->createQueryBuilder()
            ->select('MAX(u.lastLogin)')
            ->from('AppBundle:User', "u")
            ->where("u.site = :site")
            ->setParameters([":site" => $site->getId()])
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function search(Site $site, $term)
    {
        return $this->_em
            ->createQueryBuilder()
            ->select('u')
            ->from('AppBundle:User', "u")
            ->where("u.site = :site")
            ->andWhere("u.username LIKE :username")
            ->orderBy("u.username")
            ->setParameters([":site" => $site->getId(), ":username" => '%' . $term . '%'])
            ->getQuery()
            ->execute();
    }
}
