<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function findSiteMap()
    {
        return $this->createQueryBuilder('u')
            ->getQuery()
            ->iterate();
    }

    public function getUserFbIdsCount(\DateTime $from)
    {
        return (int) $this->createQueryBuilder('u')
            ->select('count(i.facebook_id)')
            ->join('u.info', 'i')
            ->where('u.updatedAt >= :from')
            ->andWhere('i.facebook_id IS NOT NULL')
            ->andWhere('u.path IS NULL')
            ->setParameter('from', $from->format('Y-m-d'))
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getUsersWithInfo(\DateTime $from, int $page, int $limit)
    {
        return $this->createQueryBuilder('u')
            ->select('u', 'i')
            ->join('u.info', 'i')
            ->where('u.updatedAt >= :from')
            ->andWhere('i.facebook_id IS NOT NULL')
            ->andWhere('u.path IS NULL')
            ->setParameter('from', $from->format('Y-m-d'))
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function findTopMembres($page = 1, $limit = 7)
    {
        return $this->createQueryBuilder('u')
            ->select('u', 'i')
            ->leftJoin('u.info', 'i')
            ->orderBy('u.lastLogin', 'DESC')
            ->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();
    }

    public function findMembresCount()
    {
        return $this->_em
            ->createQueryBuilder()
            ->select('count(u.id)')
            ->from('App:User', 'u')
            ->getQuery()
            ->getSingleScalarResult();
    }
}
